name: preview-automerge

on:
  pull_request:
    types: [labeled, synchronize]

permissions:
  pull-requests: write
  contents: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'preview-target')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find and merge all preview PRs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCH: ${{ github.event.pull_request.head.ref }}
          TARGET_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=open")

          PR_COUNT=$(echo "$RESPONSE" | jq '. | length')

          if [ "$PR_COUNT" -eq "0" ]; then
            exit 0
          fi

          for i in $(seq 0 $(($PR_COUNT - 1))); do
            PR_NUMBER=$(echo $RESPONSE | jq -r ".[$i].number")
            PREVIEW_BRANCH=$(echo $RESPONSE | jq -r ".[$i].head.ref")

            LABELS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels")
            
            if ! echo $LABELS | jq -e '.[] | select(.name == "preview")' > /dev/null; then
              continue
            fi
            
            echo "Processing preview PR #$PR_NUMBER (branch: $PREVIEW_BRANCH)"
            
            # プレビューブランチをチェックアウト
            git fetch origin $TARGET_BRANCH
            git fetch origin $PREVIEW_BRANCH
            git checkout $PREVIEW_BRANCH
            
            # preview-targetブランチの内容をマージ（直接コミットとして適用）
            echo "Applying changes from $TARGET_BRANCH to $PREVIEW_BRANCH"
            if git merge --no-ff origin/$TARGET_BRANCH -m "Apply changes from $TARGET_BRANCH (SHA: $TARGET_SHA)"; then
              # 変更をプッシュ
              git push origin $PREVIEW_BRANCH
              echo "✅ Successfully applied changes to preview branch $PREVIEW_BRANCH"
              
            else
              ERROR_MSG=$(echo "$MERGE_RESULT" | jq -r '.message')
              echo "❌ Failed to merge PR #$PR_NUMBER: $ERROR_MSG"
            fi
          done
